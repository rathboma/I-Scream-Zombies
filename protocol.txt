Actions
	Post join_game (name, ai)
		returns
		{uuid : <UUID>}
			UUID (which is a key for a particular player in a particular game)

	Get turn(uuid)
		returns
		{turn:true}
			true or false
	Get Get_game_state (uuid)
		returns
			game status in JSON
				:game_board = {
					:size = [x,y]
					:known = [{
						:x,
						:y,
						:store => t/f,
						:zombies = int,
						:customers = [
							{	
								:id,
								:favorite_type = "C,S,V",
								:favorite_price,
								:favorite_number, (-1 indicates unlimited)
								
							}, {cust2}, ..., {custN}
						]
					}...]
				},
				:players = {
					:you => { #player obj
						:x = int,
						:y = int,
						:prev_x = int,
						:prev_y = int,
						:score = float,
						:money = float,
						:vanilla = int,
						:chocolate = int,
						:strawberry = int,
						:kills = int,
						:sales = int,
						:turns_remaining = int,
						:can_act = boolean,
						:can_move = boolean,
					},
					:other => [{} ... {}] of other player objects
				},
				:your_turn = boolean,
				:game_over = boolean,
				:win = boolean
				:costs => {
					"V" => 1,
					"C" => 2,
					"S" => 3
				}
				:base_prices => {
					"V" => 2
					"C" => 3
					"S" => 4
				}
			}
				or
			error (if uuid is unmatched)
	Post Make_move (uuid, x, y)
		returns {
					:tile = {
						:customers = [{}, {}, {}], #see above
						:zombies = int,
						:store = boolean,
					},
					:player = #player
				}
		OR:
		{
			:error = "Reason for error"
		}


	post Buy
		params: flavor, number
		returns tile, player
	post sell
		params: flavors, number, customer_id
		returns tile, player
	post kill
		params: none
		returns tile, player
	post run
		params: none
		returns tile, player